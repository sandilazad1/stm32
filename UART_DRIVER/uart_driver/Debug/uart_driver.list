
uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000300  08000300  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000300  08000300  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000300  08000300  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000300  08000300  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000308  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800030c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800030c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d18  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000473  00000000  00000000  00020d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  000211b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00021378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015218  00000000  00000000  000214f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d4d  00000000  00000000  00036708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007afa4  00000000  00000000  00038455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b33f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000520  00000000  00000000  000b344c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080002e8 	.word	0x080002e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080002e8 	.word	0x080002e8

0800014c <main>:
#define UART1_EN_FUN (1 << 13)

void Uart_int(void);
void Uart_write(void);

int main(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	Uart_int();
 8000150:	f000 f806 	bl	8000160 <Uart_int>
	Uart_write();
 8000154:	f000 f836 	bl	80001c4 <Uart_write>
  return 0;
 8000158:	2300      	movs	r3, #0
}
 800015a:	4618      	mov	r0, r3
 800015c:	bd80      	pop	{r7, pc}
	...

08000160 <Uart_int>:

  void Uart_int(void){
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=  GPIO_EN;
 8000164:	4b14      	ldr	r3, [pc, #80]	; (80001b8 <Uart_int+0x58>)
 8000166:	699b      	ldr	r3, [r3, #24]
 8000168:	4a13      	ldr	r2, [pc, #76]	; (80001b8 <Uart_int+0x58>)
 800016a:	f043 0304 	orr.w	r3, r3, #4
 800016e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= UART1_EN;
 8000170:	4b11      	ldr	r3, [pc, #68]	; (80001b8 <Uart_int+0x58>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <Uart_int+0x58>)
 8000176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800017a:	6193      	str	r3, [r2, #24]
  GPIOA->CRH &= 0xFFFFF00F;
 800017c:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <Uart_int+0x5c>)
 800017e:	685b      	ldr	r3, [r3, #4]
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <Uart_int+0x5c>)
 8000182:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000186:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000008B0;
 8000188:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <Uart_int+0x5c>)
 800018a:	685b      	ldr	r3, [r3, #4]
 800018c:	4a0b      	ldr	r2, [pc, #44]	; (80001bc <Uart_int+0x5c>)
 800018e:	f443 630b 	orr.w	r3, r3, #2224	; 0x8b0
 8000192:	6053      	str	r3, [r2, #4]
	USART1->BRR = 0x1D4C;
 8000194:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <Uart_int+0x60>)
 8000196:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800019a:	609a      	str	r2, [r3, #8]
	USART1->CR1  = UART1_TX_EN;
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <Uart_int+0x60>)
 800019e:	2208      	movs	r2, #8
 80001a0:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= UART1_EN_FUN;
 80001a2:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <Uart_int+0x60>)
 80001a4:	68db      	ldr	r3, [r3, #12]
 80001a6:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <Uart_int+0x60>)
 80001a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001ac:	60d3      	str	r3, [r2, #12]
}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40013800 	.word	0x40013800

080001c4 <Uart_write>:
void Uart_write(void){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	while(1){
		USART1->DR = 0x4E;
 80001c8:	4b01      	ldr	r3, [pc, #4]	; (80001d0 <Uart_write+0xc>)
 80001ca:	224e      	movs	r2, #78	; 0x4e
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	e7fb      	b.n	80001c8 <Uart_write+0x4>
 80001d0:	40013800 	.word	0x40013800

080001d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <NMI_Handler+0x4>

080001da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001de:	e7fe      	b.n	80001de <HardFault_Handler+0x4>

080001e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <MemManage_Handler+0x4>

080001e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001e6:	b480      	push	{r7}
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <BusFault_Handler+0x4>

080001ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <UsageFault_Handler+0x4>

080001f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr

080001fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001fe:	b480      	push	{r7}
 8000200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr

0800020a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800020a:	b480      	push	{r7}
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800020e:	bf00      	nop
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr

08000216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800021a:	f000 f82f 	bl	800027c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}

08000222 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000226:	bf00      	nop
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
	...

08000230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000230:	480c      	ldr	r0, [pc, #48]	; (8000264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000232:	490d      	ldr	r1, [pc, #52]	; (8000268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000234:	4a0d      	ldr	r2, [pc, #52]	; (800026c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000238:	e002      	b.n	8000240 <LoopCopyDataInit>

0800023a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800023c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023e:	3304      	adds	r3, #4

08000240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000244:	d3f9      	bcc.n	800023a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000248:	4c0a      	ldr	r4, [pc, #40]	; (8000274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800024c:	e001      	b.n	8000252 <LoopFillZerobss>

0800024e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000250:	3204      	adds	r2, #4

08000252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000254:	d3fb      	bcc.n	800024e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000256:	f7ff ffe4 	bl	8000222 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800025a:	f000 f821 	bl	80002a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025e:	f7ff ff75 	bl	800014c <main>
  bx lr
 8000262:	4770      	bx	lr
  ldr r0, =_sdata
 8000264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000268:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800026c:	08000308 	.word	0x08000308
  ldr r2, =_sbss
 8000270:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000274:	20000024 	.word	0x20000024

08000278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000278:	e7fe      	b.n	8000278 <ADC1_2_IRQHandler>
	...

0800027c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <HAL_IncTick+0x1c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	461a      	mov	r2, r3
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <HAL_IncTick+0x20>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4413      	add	r3, r2
 800028c:	4a03      	ldr	r2, [pc, #12]	; (800029c <HAL_IncTick+0x20>)
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	20000000 	.word	0x20000000
 800029c:	20000020 	.word	0x20000020

080002a0 <__libc_init_array>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	2600      	movs	r6, #0
 80002a4:	4d0c      	ldr	r5, [pc, #48]	; (80002d8 <__libc_init_array+0x38>)
 80002a6:	4c0d      	ldr	r4, [pc, #52]	; (80002dc <__libc_init_array+0x3c>)
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	10a4      	asrs	r4, r4, #2
 80002ac:	42a6      	cmp	r6, r4
 80002ae:	d109      	bne.n	80002c4 <__libc_init_array+0x24>
 80002b0:	f000 f81a 	bl	80002e8 <_init>
 80002b4:	2600      	movs	r6, #0
 80002b6:	4d0a      	ldr	r5, [pc, #40]	; (80002e0 <__libc_init_array+0x40>)
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <__libc_init_array+0x44>)
 80002ba:	1b64      	subs	r4, r4, r5
 80002bc:	10a4      	asrs	r4, r4, #2
 80002be:	42a6      	cmp	r6, r4
 80002c0:	d105      	bne.n	80002ce <__libc_init_array+0x2e>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c8:	4798      	blx	r3
 80002ca:	3601      	adds	r6, #1
 80002cc:	e7ee      	b.n	80002ac <__libc_init_array+0xc>
 80002ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d2:	4798      	blx	r3
 80002d4:	3601      	adds	r6, #1
 80002d6:	e7f2      	b.n	80002be <__libc_init_array+0x1e>
 80002d8:	08000300 	.word	0x08000300
 80002dc:	08000300 	.word	0x08000300
 80002e0:	08000300 	.word	0x08000300
 80002e4:	08000304 	.word	0x08000304

080002e8 <_init>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr

080002f4 <_fini>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr
